Anonymous class

An anonymous class is an inner class without a name, which means that we can declare and instantiate a class at the same time. An anonymous class is used primarily when we want to use the class declaration once. Anonymous classes usually extend a subclass or implement an interface.In Java, an anonymous class is a class without a name that's defined on the fly, typically for overriding methods or implementing interfaces in a concise manner. Here's an example to illustrate how anonymous classes are used:


// Example interface
interface Greeting {
    void greet();
}

public class Main {
    public static void main(String[] args) {
        // Creating an instance of the Greeting interface using anonymous class
        Greeting englishGreeting = new Greeting() {
            @Override
            public void greet() {
                System.out.println("Hello, world!");
            }
        };

        // Calling the greet method of the anonymous class instance
        englishGreeting.greet();
    }
}

In this example:

Greeting is a functional interface with a single abstract method greet().
An anonymous class is created and instantiated using new Greeting() { ... }, which implements the Greeting interface inline.
Inside the anonymous class definition, the greet() method is overridden to specify what happens when greet() is called.
Finally, englishGreeting.greet() invokes the overridden greet() method of the anonymous class instance.

Anonymous classes are particularly useful when you need to implement an interface with a small amount of code and you don't need to reuse the class elsewhere in your codebase. They provide a way to define and instantiate a class in a single concise expression.

In Java, anonymous classes are typically used in conjunction with interfaces or classes they extend. This means that while you can instantiate an anonymous class without assigning it to a variable (making it technically "standalone"), the anonymous class itself still needs to extend a class or implement an interface.


public class Main {
    public static void main(String[] args) {
        // Standalone anonymous class implementing Runnable interface
        new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("Inside anonymous class thread");
            }
        }).start();
    }
}

In this example:

We create a new Thread object and pass an anonymous class implementing the Runnable interface directly to its constructor.
Inside the anonymous class, we override the run() method to specify the thread's behavior.
The start() method is then called on the thread object, which starts the execution of the thread, causing "Inside anonymous class thread" to be printed to the console.

This anonymous class is "standalone" in the sense that it's defined and instantiated inline without assigning it to a named variable. However, it still implements the Runnable interface, demonstrating that even standalone anonymous classes need to extend a class or implement an interface.

It's important to note that starting from Java 8, with the introduction of lambda expressions, anonymous classes are less commonly used for implementing single-method interfaces like Runnable, as lambda expressions provide a more concise syntax. However, anonymous classes are still useful for more complex scenarios or when you need to create instances of classes without explicitly defining a named class.


customer - id , name, mobile number,age
employee - id, name, mobile number 
vendors - id, name, eligibility(max amount, min amount, max tenure, min tenure,age, cibil), loanTypes
loanTypes - id , type
loanApplication - id,customer,employee,loanType,vendor,cibil,amount,tenure,start date,end date,emi,installments,installmentDetails,loanstatus
paymentDetails - id, amount,date,status,customer


Make sure that your entity class has public getter methods for all the fields that you want to be included in the JSON response. Spring uses these getter methods to serialize objects into JSON.
The @RestController annotation indicates that the class is a controller where every method returns a domain object instead of a view.
The @RequestMapping("/api/users") annotation maps HTTP requests to handler methods of MVC and REST controllers.
The @GetMapping("/example") annotation is a composed annotation that acts as a shortcut for @RequestMapping(method = RequestMethod.GET).
To get a response in JSON directly in a Spring Boot application, you typically use the @RestController annotation in combination with the @RequestMapping (or other mapping annotations like @GetMapping, @PostMapping, etc.) on your controller methods. The @RestController annotation itself is a convenience annotation that combines @Controller and @ResponseBody, which means it tells Spring to convert the return value of the methods into JSON (or XML or other formats based on the content negotiation).

When working with Spring Data JPA and using Postman to send requests, you should use the member (field) names of the entity class, not the column names specified in the @Column annotation.

Hereâ€™s a brief explanation:

Entity Class Field Names: These are the names of the variables in your entity class. These names are used when you serialize/deserialize JSON objects in your REST API.

Column Names: These are the names used in the database. They are defined by the @Column annotation in your entity class and are used to map the fields of your entity to the columns in your database table.
